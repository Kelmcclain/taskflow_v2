// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(uuid())
  email             String              @unique
  hashedPassword    String
  name              String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  workspacesCreated Workspace[]         @relation("WorkspaceCreator")
  workspacesMember  WorkspaceMember[]
  assignedTasks     Task[]              @relation("TaskAssignee")
  createdTasks      Task[]              @relation("TaskCreator")
}

model Workspace {
  id          String            @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  creator     User              @relation("WorkspaceCreator", fields: [creatorId], references: [id])
  creatorId   String
  members     WorkspaceMember[]
  tasks       Task[]
}

model WorkspaceMember {
  id          String    @id @default(uuid())
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  role        String    @default("member") // "admin" or "member"
  joinedAt    DateTime  @default(now())

  @@unique([workspaceId, userId])
}

model Task {
  id          String    @id @default(uuid())
  title       String
  description String?
  status      String    @default("todo")
  priority    String    @default("medium")
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  assignee    User?     @relation("TaskAssignee", fields: [assigneeId], references: [id])
  assigneeId  String?
  creator     User      @relation("TaskCreator", fields: [creatorId], references: [id])
  creatorId   String
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}